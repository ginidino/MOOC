Exercise 75 is about Decreasing counter and is divided into 4 part
  * The starting point of this exercise is a partially implemented class DecreasingCounter:
    public class DecreasingCounter {
        private int value;   // object variable that remembers the value of the counter

        public DecreasingCounter(int valueAtStart) {
            this.value = valueAtStart;
        }

       public void printValue() {
            System.out.println("value: " + this.value);
        }

        public void decrease() {
            // write here the code that decrements the value of counter by one
        }

        // and here the rest of the methods
    }
    
  * The counter can be used as follows:
    public class Main {
        public static void main(String[] args) {
            DecreasingCounter counter = new DecreasingCounter(10);

            counter.printValue();

            counter.decrease();
            counter.printValue();

            counter.decrease();
           counter.printValue();
        }
    }
    
  * Output should be:
    value: 10
    value: 9
    value: 8
  
  * The constructor of DecreasingCounter receives as parameter the initial value of the counter. 
    In the example, the constructor parameter is 10, which is then set to the object variable this.value. 
    The value of the counter can be printed with the method printValue(). The method decrease() should decrease the value of the counter by one.


Exercise 75.1 is about Implementing method decrease()
  * Implement the method decrease() so that when called, the object variable this.value is decreased by one. 
    When this is done, your program should work as the example above.

Exercise 75.2 is about Value remains positive
  * Change your implementation of the method decrease() so that the value of the counter will not drop below zero. 
    If the method is called when the value is zero, nothing should happen:
    
    public class Main {
        public static void main(String[] args) {
            DecreasingCounter counter = new DecreasingCounter(2);

            counter.printValue();

            counter.decrease();
            counter.printValue();

            counter.decrease();
            counter.printValue();

            counter.decrease();
            counter.printValue();
        }
    }
    
  * Output should be:
    value: 2
    value: 1
    value: 0
    value: 0

Exercise 75.3 is about Counter reset
  * Implement the method public void reset() that sets the value of the counter to zero. Example of usage:

    public class Main {
        public static void main(String[] args) {
            DecreasingCounter counter = new DecreasingCounter(100);

            counter.printValue();

            counter.reset();
            counter.printValue();

            counter.decrease();
            counter.printValue();
        }
    }
    
  * Output:
    value: 100
    value: 0
    value: 0

Exercise 75.4 is about Back to initial value
  * Implement the method public void setInitial(), which returns the counter to its initial value:

    public class Main {
        public static void main(String[] args) {
            DecreasingCounter counter = new DecreasingCounter(100);

            counter.printValue();

            counter.decrease();
            counter.printValue();

            counter.decrease();
            counter.printValue();

            counter.reset();
            counter.printValue();

            counter.setInitial();
            counter.printValue();
        }
    }
    
  * Output:
    value: 100
    value: 99
    value: 98
    value: 0
    value: 100
    
  * Hint: add to the class a new object variable that remembers the initial value of the counter
